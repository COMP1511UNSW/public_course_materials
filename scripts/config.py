#!/usr/bin/python3
#
# set variables to appropriate values for course & session
#
# See also environment.sh

import os, re, shlex, sys

course_name='Introduction to Programming'
postgraduate_course_code=''
# these values need to updated every session
course_forum_url='https://piazza.com/class/j5ji4vjjra62a3'
lecture_recordings_url='https://moodle.telt.unsw.edu.au/course/view.php?id=27708'

# these values are only used if they can't be extracted from sys.argv[0]
public_html_session_directory='/web/cs1511/18s1'
course_account='cs1511'
unsw_session='18s1'

#
# if we are running as a CGI script at CSE
# home directories are not mounted
# and public_html directory are mounted as /web/account/
#


dir = os.path.dirname(os.path.realpath(sys.argv[0]))
# remove CSE auto-mounter prefix
dir = re.sub('^/tmp_amd/\w+/export/\w+/\d/(\w+)', r'/home/\1', dir)

m = re.search(r'^(.*\b([a-z][a-z]\d{4})(cgi)?\b.*\b(\d\d[sx][12])\b).*', dir)
if m:
	(public_html_session_directory, course_account, unsw_session) = (m.group(1), m.group(2),  m.group(4))
else:
	m = re.search(r'^(.*\b([a-z][a-z]\d{4})(cgi)?(/public_html)?)\b.*', dir)
	if m:
		(public_html_session_directory, course_account, unsw_session) = (m.group(1), m.group(2), unsw_session)

# use CSE web-mount of public-html directory if it exists
web_mount_pathname = re.sub('^/home/(\w+)/public_html', r'/web/\1', public_html_session_directory)
if os.path.exists(web_mount_pathname):
	public_html_session_directory = web_mount_pathname

course_code = course_account
for (short,full) in {'cs':'COMP', 'en':'ENGG', 'se':'SENG', 'bi':'BINF'}.items():
	if course_code.startswith(short):
		course_code = course_code.replace(short, full)
		break

variables = {
	# /home/class/bin needed for exam environment
	'PATH' : '/home/class/bin:/home/give/stable/bin:/usr/local/bin:/usr/bin:/bin/:/sbin:/usr/sbin:.',
	'LANG' : 'en_AU.utf8',
	'LANGUAGE' : 'en_AU.UTF-8',
	'LC_ALL' : 'en_AU.UTF-8',
	'LC_COLLATE' : 'POSIX',
	'GIVEHOME' : '/home/give/stable',
	'ARCH' : 'pc.i86.linux',
	'public_html_session_directory' : public_html_session_directory,
	'base_directory' : public_html_session_directory, # backwards compatibility
	'public_html_directory' : os.path.dirname(public_html_session_directory),
	'scripts_directory' : os.path.join(public_html_session_directory, 'scripts'),
	'home_directory' : os.path.join('/home', course_account),
	'bin_directory' : os.path.join('/home', course_account, 'bin'),
	'course_account' : course_account,
	'course_code' : course_code,
	'course_code_regex' : course_code + ('|' + postgraduate_course_code if postgraduate_course_code else ''),
	'course_number' : course_code[4:],
	'postgraduate_course_code' : postgraduate_course_code,
	'course_name' : course_name,
	'unsw_session' : unsw_session,
	'canonical_url' : 'https://cgi.cse.unsw.edu.au/~' + course_account + '/',
	'github_repo_url' : 'https://github.com/{}UNSW/course_materials'.format(course_code),
	'course_forum_url': course_forum_url,
	'lecture_recordings_url': lecture_recordings_url,
	'WORK' : os.path.join(public_html_session_directory , 'work'),
	'OUT' : os.path.join(public_html_session_directory , 'work', '.out'),
	'MARKED' : os.path.join(public_html_session_directory , 'work', '.out', '.marked'),
	'SMSDB' : os.path.join(public_html_session_directory , 'work', unsw_session+'db.sms'),

	'course_codes' : [course_code] + ([postgraduate_course_code] if postgraduate_course_code else []), # including aliases
	'tlb_directory' : os.path.join(public_html_session_directory, 'tlb'),
	'lecture_directory' : os.path.join(public_html_session_directory, 'lec'),
	'flask_cache_directory' :  os.path.join(public_html_session_directory, 'flask_cache'),
	'testing_results_file' : os.path.join(public_html_session_directory, 'work', 'testing_results.json'),
	'enrollments_file' : os.path.join(public_html_session_directory, 'work', 'enrollments.json'),
	'unsw_ldap_password_file' : os.path.join(os.path.dirname(public_html_session_directory), '.unsw_ldap_password'),
	'autotest_upload_url' : 'https://cgi.cse.unsw.edu.au/~{}/cgi/autotest_upload.cgi'.format(course_account),
}

variables['PATH'] = ':'.join((variables['scripts_directory'], variables['bin_directory'], variables['PATH']))

dangerous_environment_variables = "CDPATH IFS LOCALE LD_LIBRARY_PATH LD_PRELOAD LD_AUDIT ORIGIN".split()

# unset possibly dangerous environment variables
for variable in dangerous_environment_variables:
	os.environ.pop(variable, None)

environment_variables = "PATH LANG LANGUAGE LC_ALL LC_COLLATE WORK OUT MARKED SMSDB PATH".split()

for variable in environment_variables:
	os.environ[variable] = variables[variable]

if __name__ == '__main__':
	print("#!/bin/bash")
	print("# auto-generated by", sys.argv[0])
	print('unset', ' '.join(dangerous_environment_variables))
	for (name,value) in variables.items():
		if isinstance(value, str):
			print('{}={}'.format(name, shlex.quote(value)))
	print('export', ' '.join(environment_variables))
	
